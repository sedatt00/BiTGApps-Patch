#!/sbin/sh
#
##############################################################
# File name       : update-binary
#
# Description     : Installation script for BiTGApps
#
# Build Date      : Friday March 15 11:36:43 IST 2019
#
# Updated on      : Friday October 25 11:27:10 IST 2019
#
# GitHub          : TheHitMan7 <krtik.vrma@gmail.com>
#
# BiTGApps Author : TheHitMan @ xda-developers
#
# Copyright       : Copyright (C) 2019 TheHitMan7
#
# License         : SPDX-License-Identifier: GPL-3.0-or-later
#
# The BiTGApps scripts are free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# These scripts are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
##############################################################

# This command should be executed before any other command
# FIX IT: 32-bit binary in 64-bit system
recovery_actions() {
  OLD_LD_LIB=$LD_LIBRARY_PATH
  OLD_LD_PRE=$LD_PRELOAD
  OLD_LD_CFG=$LD_CONFIG_FILE
  unset LD_LIBRARY_PATH
  unset LD_PRELOAD
  unset LD_CONFIG_FILE
}
recovery_actions;

export ZIPFILE="$3"
export OUTFD="/proc/self/fd/$2"
export TMP="/tmp"

case "$(uname -m)" in
  *86*) export BINARCH="x86";; # e.g. Zenfone is i686
  *ar*) export BINARCH="arm";; # i.e. armv7l and aarch64
esac

bb="$TMP/busybox-$BINARCH"
l="$TMP/bin"

# selinux
setenforce 0

# selinux status
selinux_variable() {
  getenforce >> /cache/bitgapps/selinux.log
}

# Detect A/B partition layout https://source.android.com/devices/tech/ota/ab_updates
# and system-as-root https://source.android.com/devices/bootloader/system-as-root
if [ -n "$(cat /proc/cmdline | grep slot_suffix)" ];
then
  device_abpartition=true
  SYSTEM_MOUNT=/system
  VENDOR=/vendor
elif [ -n "$(cat /etc/recovery.fstab | grep /system_root)" ];
then
  device_abpartition=false
  SYSTEM_MOUNT=/system_root
  VENDOR=/vendor
else
  device_abpartition=false
  SYSTEM_MOUNT=/system
  VENDOR=/vendor
fi

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}

set_progress() { echo "set_progress $1" > "$OUTFD"; }

PROPFILES="/system/build.prop /system/system/build.prop /system_root/system/build.prop $VENDOR/build.prop /proc/cmdline"

get_file_prop() {
  grep -m1 "^$2=" "$1" | cut -d= -f2
}

get_prop() {
  #check known .prop files using get_file_prop
  for f in $PROPFILES; do
    if [ -e "$f" ]; then
      prop="$(get_file_prop "$f" "$1")"
      if [ -n "$prop" ]; then
        break #if an entry has been found, break out of the loop
      fi
    fi
  done
  #if prop is still empty; try to use recovery's built-in getprop method; otherwise output current result
  if [ -z "$prop" ]; then
    getprop "$1" | cut -c1-
  else
    printf "$prop"
  fi
}

# mount: Set system-as-root and a/b partition property
system_as_root=`getprop ro.build.system_root_image`
active_slot=`getprop ro.boot.slot_suffix`
boot_slot=`get_prop androidboot.slot_suffix`
ab_update=`getprop ro.build.ab_update`

# Restore LD Path
recovery_cleanup() {
  [ -z $OLD_LD_LIB ] || export LD_LIBRARY_PATH=$OLD_LD_LIB
  [ -z $OLD_LD_PRE ] || export LD_PRELOAD=$OLD_LD_PRE
  [ -z $OLD_LD_CFG ] || export LD_CONFIG_FILE=$OLD_LD_CFG
}

cleanup() {
  rm -rf /tmp/unzip;
  rm -rf /tmp/zip;
}

clean_logs() {
  rm -rf /cache/bitgapps;
}

# Generate a separate log file on abort
on_install_failed() {
 rm -rf /sdcard/bitgapps_debug_failed_logs.tar.gz
 rm -rf /cache/bitgapps
 mkdir /cache/bitgapps
 cd /cache/bitgapps
 cp -f $TMP/recovery.log /cache/bitgapps/recovery.log
 selinux_variable;
 cp -f $SYSTEM/build.prop /cache/bitgapps/build.prop
 cp -f $VENDOR/build.prop /cache/bitgapps/build2.prop
 tar -cz -f "$TMP/bitgapps_debug_failed_logs.tar.gz" *
 cp -f $TMP/bitgapps_debug_failed_logs.tar.gz /sdcard/bitgapps_debug_failed_logs.tar.gz
 # Checkout log path
 cd /
}

# log
on_install_complete() {
 rm -rf /sdcard/bitgapps_debug_complete_logs.tar.gz
 cd /cache/bitgapps
 cp -f $TMP/recovery.log /cache/bitgapps/recovery.log
 cp -f $SYSTEM/build.prop /cache/bitgapps/build.prop
 cp -f $VENDOR/build.prop /cache/bitgapps/build2.prop
 tar -cz -f "$TMP/bitgapps_debug_complete_logs.tar.gz" *
 cp -f $TMP/bitgapps_debug_complete_logs.tar.gz /sdcard/bitgapps_debug_complete_logs.tar.gz
 # Checkout log path
 cd /
}

unmount_all() {
ui_print " "
 if [ "$device_abpartition" = "true" ]; then
     mount -o ro $SYSTEM_MOUNT
     mount -o ro $VENDOR
 else
     umount $SYSTEM_MOUNT
     umount $VENDOR
 fi;
}

abort() {
  ui_print "$*";
  unmount_all;
  on_install_failed;
  clean_logs;
  cleanup;
  recovery_cleanup;
  exit 1;
}

# package defaults
PKG="BiTGApps"
ARCH="ARM & ARM64"
UNI="Semi-Universal"
AD="Assistant"
DATE="day month date hrs:mins:secs tz year"
AUTH="TheHitMan @ xda-developers"

set_progress 1.34 4;
ui_print " ";

for f in busybox-arm installer.sh; do
  unzip -o "$ZIPFILE" "$f" -d "$TMP";
done

for f in busybox-arm installer.sh; do
  chmod +x "$TMP/$f";
done

ui_print "***********************************************";
ui_print "Custom GApps Package : BiTGApps                ";
ui_print "Developed By         : TheHitMan               ";
ui_print "***********************************************";

ui_print " ";

ui_print "Installing toolbox";
if [ -e "$bb" ]; then
  install -d "$l"
  for i in $($bb --list); do
    if ! ln -sf "$bb" "$l/$i" && ! $bb ln -sf "$bb" "$l/$i" && ! $bb ln -f "$bb" "$l/$i" ; then
      # create script wrapper if symlinking and hardlinking failed because of restrictive selinux policy
      if ! echo "#!$bb" > "$l/$i" || ! chmod +x "$l/$i" ; then
        ui_print "ERROR 10: Failed to set-up pre-bundled busybox";
        exit 1
      fi
    fi
  done
else
  ui_print "No match found !";
  exit 1
fi

ui_print " ";

ui_print "Mount Partitions";
# Check partition layout whether system-as-root device or not
# Prepare installation if its a system-as-root device
# else prepare installation for A-only & A/B partition
if [ -n "$(cat /etc/recovery.fstab | grep /system_root)" ];
then
  mounts=""
  for m in "/cache" "/data" "/system_root" "/vendor"; do
    p=$m
    if [ -d "$p" ] && grep -q "$p" "/etc/recovery.fstab" && ! mountpoint -q "$p"; then
      mounts="$mounts $p"
    fi
  done
  for m in $mounts; do
    mount -o rw "$m"
  done
else
  mounts=""
  for m in "/cache" "/data" "/system" "$VENDOR"; do
    p=$m
    if [ -d "$p" ] && grep -q "$p" "/etc/recovery.fstab" && ! mountpoint -q "$p"; then
      mounts="$mounts $p"
    fi
  done
  for m in $mounts; do
    mount -o rw "$m"
  done
fi

# Remount /system using its block device, if previous mount failed
# Note: system_SLOT "SLOTSELECT=_a and SLOTSELECT=_b"; already defined
if [ "$boot_slot" == "_a" ];
then
  device_abpartition=true
  block=/dev/block/bootdevice/by-name/system_a
  mount -o rw "$block" "$SYSTEM_MOUNT"
elif [ "$boot_slot" == "_b" ];
then
  device_abpartition=true
  block=/dev/block/bootdevice/by-name/system_b
  mount -o rw "$block" "$SYSTEM_MOUNT"
elif [ "$system_as_root" == "true" ];
then
  device_abpartition=false
  block=`cat /etc/recovery.fstab | cut -d '#' -f 1 | grep /system_root | grep -o '/dev/[^ ]*' | head -1`
  mount -o rw "$block" "$SYSTEM_MOUNT"
else
  device_abpartition=false
  block=`cat /etc/recovery.fstab | cut -d '#' -f 1 | grep /system | grep -o '/dev/[^ ]*' | head -1`
  mount -o rw "$block" "$SYSTEM_MOUNT"
fi

# Remount /system to /system_root if we have system-as-root
if [ -f /system/init.rc ]; then
  system_as_root=true
  [ -L /system_root ] && rm -f /system_root
  mkdir /system_root 2>/dev/null
  mount --move /system /system_root
  mount -o bind /system_root/system /system
else
  grep ' / ' /proc/mounts | grep -qv 'rootfs' || grep -q ' /system_root ' /proc/mounts \
  && system_as_root=true || system_as_root=false
fi

ui_print " ";

# Check to make certain that user device matches the architecture
device_architecture="$(get_prop "ro.product.cpu.abilist")"
# If the recommended field is empty, fall back to the deprecated one
if [ -z "$device_architecture" ]; then
  device_architecture="$(get_prop "ro.product.cpu.abi")"
fi

case "$device_architecture" in
  *x86_64*) arch="x86_64";;
  *x86*) arch="x86";;
  *arm64*) arch="arm64";;
  *armeabi*) arch="arm";;
  *) arch="unknown";;
esac

ui_print "Checking Android ARCH";
for targetarch in arm64; do
  if [ "$arch" = "$targetarch" ]; then
    ui_print "$arch";
    ui_print " ";
  elif [ "$arch" = "arm" ]; then
    ui_print "$arch";
    ui_print " ";
  else
    ui_print " ";
    abort "Unsupported Android ARCH. Aborting...";
    ui_print " ";
  fi;
done

ui_print "Installing";
clean_logs;
PATH="$l:$PATH" $bb ash "$TMP/installer.sh" "$@"

ui_print " ";

ui_print "Unmount Partitions";
selinux_variable;
on_install_complete;
clean_logs;
cleanup;
recovery_cleanup;
unmount_all;

ui_print "Done!";
ui_print " ";
ui_print "****************** Software *******************";
ui_print "Custom GApps    : $PKG";
ui_print "Android Arch    : $ARCH";
ui_print "Package Type    : $UNI";
ui_print "Addon Type      : $AD";
ui_print "Build date      : $DATE";
ui_print "Developed By    : $AUTH";
ui_print "***********************************************";
ui_print " ";
